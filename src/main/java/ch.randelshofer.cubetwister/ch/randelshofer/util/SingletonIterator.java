/* *                 Sun Public License Notice * * The contents of this file are subject to the Sun Public License * Version 1.0 (the "License"). You may not use this file except in * compliance with the License. A copy of the License is available at * http://www.sun.com/ * * The Original Code is NetBeans. The Initial Developer of the Original * Code is Sun Microsystems, Inc. Portions Copyright 1997-2000 Sun * Microsystems, Inc. All Rights Reserved. *///package org.openide.util.enum;package ch.randelshofer.util;import java.util.Iterator;import java.util.NoSuchElementException;/** The class that encapsulates one object into one element enumeration.** @author   Jaroslav Tulach* @version $Id$*/public class SingletonIterator<T> implements Iterator<T> {    /** object to return */    private T object;    /** @param object object to be put into the enumeration    */    public SingletonIterator (T object) {        this.object = object;    }    /** Tests if this enumeration contains next element.    * @return  <code>true</code> if this enumeration contains it    *          <code>false</code> otherwise.    */    @Override    public boolean hasNext() {        return object != null;    }    /** Returns the next element of this enumeration.    * @return     the next element of this enumeration.    * @exception  NoSuchElementException  if no more elements exist.    */    @Override    public synchronized T next() {        if (object == null) {            throw new NoSuchElementException();        } else {            T o = object;            object = null;            return o;        }    }    @Override    public void remove() {        throw new UnsupportedOperationException("Not supported yet.");     }}