/*
 * @(#)CubeExplorerExporter.java  1.0  April 17, 2004
 * Copyright (c) 2004 Werner Randelshofer, Switzerland.
 * You may only use this software in accordance with the license terms.
 */

package ch.randelshofer.rubik.impexp.cubeexplorer;

import ch.randelshofer.cubetwister.doc.*;
import ch.randelshofer.io.*;
import ch.randelshofer.gui.*;
import ch.randelshofer.rubik.*;
import ch.randelshofer.rubik.impexp.*;
import ch.randelshofer.rubik.parser.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
/**
 * CubeExplorer Exporter.
 * <p>
 * EBNF Productions of the File format of CubeExplorer:
 * <pre>
 * file ::= script {"\r\n" script}
 * script ::= move {" " move} ["(" number "f)"] " // " name
 * move ::= ("R" | "F" | "U" | "D" | "B" | "L") ["'" | "2"]
 * name ::= {letter | digit | space}
 * </pre>
 *
 * @author  Werner Randelshofer
 * @version 1.0  April 17, 2004  Created.
 */
public class CubeExplorerExporter extends JPanel
implements Exporter {
    private final static long serialVersionUID = 1L;
    private DocumentModel documentModel;
    private ScriptParser parser;
    
    /** Creates new form. */
    public CubeExplorerExporter() {
        initComponents();
        parser = new KociembaENGParser();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        noOptionsLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        noOptionsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        noOptionsLabel.setText("No Options Available");
        add(noOptionsLabel, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents

    public void exportFile(File file, ProgressObserver p) throws IOException {
        PrintWriter out = null;
        RubiksCube cube = new RubiksCube();
        RubiksCube translatedCube = new RubiksCube();
        
        try {
            LFWriter lfout;
            out = new PrintWriter(new LFWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file), "ISO-8859-1")), "\r\n"));
            String line;
            ArrayList columns = new ArrayList();

            p.setMaximum(documentModel.getScripts().getChildCount());
            int progress = 0;

            HashMap permutationMap = new HashMap();
            Enumeration enumer = documentModel.getScripts().children();
            while (enumer.hasMoreElements()) {
                ScriptModel item = (ScriptModel) enumer.nextElement();
                p.setProgress(++progress);
                p.setNote("Exporting "+item.getName());
                
                SequenceNode parsedScript = item.getParsedScript();
                if (parsedScript == null) {
                    throw new IOException("Can not parse script \""+item.getName()+"\".");
                }
throw new InternalError("not implemented");
/*
                out.print(parser.toString(parsedScript, Collections.EMPTY_MAP));
                out.print(" (");
                out.print(parsedScript.getFaceTurnCount());
                out.print("f) //");
                out.println(item.getName());
 */
            }
        } finally {
            if (out != null) out.close();
        }
    }    
    
    public void setDocumentModel(DocumentModel model) {
        this.documentModel = model;
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel noOptionsLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public JComponent getComponent() {
        return this;
    }
    
}
