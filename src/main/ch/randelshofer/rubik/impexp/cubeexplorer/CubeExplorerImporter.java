/*
 * @(#)CubeExplorerImporter.java  1.0  April 12, 2004
 * Copyright (c) 2004 Werner Randelshofer, Switzerland.
 * You may only use this software in accordance with the license terms.
 */

package ch.randelshofer.rubik.impexp.cubeexplorer;

import ch.randelshofer.cubetwister.doc.*;
import ch.randelshofer.gui.*;
import ch.randelshofer.util.*;
import ch.randelshofer.io.*;
import ch.randelshofer.rubik.impexp.*;
import ch.randelshofer.rubik.parser.*;
import java.awt.*;
import java.beans.*;
import java.io.*;
import java.util.*;
import java.util.List;
import javax.swing.*;
/**
 * CubeExplorer Importer.
 *
 * EBNF Productions of the File format of CubeExplorer:
 * <pre>
 * file ::= script {"\r\n" script}
 * script ::= move {" " move} ["(" number "f)"] " // " name
 * move ::= ("R" | "F" | "U" | "D" | "B" | "L") ["'" | "2"]
 * name ::= {letter | digit | space}
 * </pre>
 *
 * @author  Werner Randelshofer
 * @version $Id$
 */
public class CubeExplorerImporter extends JPanel implements Importer {
    private final static long serialVersionUID = 1L;
    private DocumentModel documentModel;
    private KociembaENGParser kociembaParser;

    /** Creates new form. */
    public CubeExplorerImporter() {
        initComponents();
        kociembaParser = new KociembaENGParser();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("No Options");
        add(jLabel1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    @Override
    public ArrayList<ScriptModel> importFile(File file, ProgressObserver p) throws IOException {
        LineNumberReader in = null;
        try {
            /*
            BoundedRangeInputStream bris;
            bris = new BoundedRangeInputStream(file, false);
            p.setModel(bris);
            in = new LineNumberReader(new InputStreamReader(bris, "ISO-8859-1"));
             */
            BoundedRangeReader bris;
            bris = new BoundedRangeReader(file, "ISO-8859-1", true);
            p.setModel(bris);
            in = new LineNumberReader(bris);
            ArrayList<ScriptModel> result = new ArrayList<ScriptModel>();
            
            @SuppressWarnings("unchecked")
            ScriptParser defaultParser = documentModel.getDefaultNotation(documentModel.getDefaultCube().getLayerCount()).getParser((List)Collections.emptyList());
            
            // Read all subsequent lines
            String line;
            while ((line = in.readLine()) != null) {
                p.setNote("Importing line "+(in.getLineNumber())+"...");
                result.add(importScript(line, defaultParser));
            }
            return result;
        } finally {
            if (in != null) in.close();
        }
    }
    
    private ScriptModel importScript(String line, ScriptParser defaultParser)
    throws IOException {
        int pbr = line.indexOf('(');
        int pss = line.indexOf("//");
        if (pbr == -1 || pbr > pss) pbr = pss;
        ScriptModel scriptModel = new ScriptModel();
        
        String script;
        if (pbr == -1) {
            script = line;
            scriptModel.setName("unnamed");
        } else {
            script = line.substring(0, pbr).trim();
            scriptModel.setName(line.substring(pss+2).trim());
        }
        SequenceNode node = kociembaParser.parse(script);
        if (true) throw new InternalError("not implemented");
 //       scriptModel.setScript(defaultParser.toString(node));
        
        return scriptModel;        
    }
    
    public void setDocumentModel(DocumentModel model) {
        this.documentModel = model;
    }
    
    public void setPreviewFile(File file) {
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public JComponent getComponent() {
        return this;
    }
    
}
